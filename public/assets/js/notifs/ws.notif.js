// Generated by CoffeeScript 2.2.3
(function() {
  /*
  WebSocket Notification class.
  Refer to the layout view.
  */
  this.WsNotif = class WsNotif {
    constructor(wsUri, topicUri) {
      var conn, ctx, protocol;
      if (window.location.protocol === 'http:') {
        protocol = 'ws:';
      } else {
        protocol = 'wss:';
      }
      wsUri = `${protocol}//${wsUri}`;
      ctx = this;
      conn = new ab.Session(wsUri, function() {
        return conn.subscribe(topicUri, function(topic, data) {
          return ctx.onSub(new WsBuild(data.projectTitle, data.type));
        });
      }, function() {
        return console.log("Something went wrong. Check if the Build Notification Server is running by executing nohup './bin/console php-censor:build-notification &' in the Terminal.");
      }, {
        'skipSubprotocolCheck': true
      });
    }

    onSub(wsBuild) {
      return this.render(wsBuild.projectTitle, wsBuild.type);
    }

    //Determines the color of the container using the theme's 
    //class name based on the build notification type.
    labelClassName(type) {
      var className;
      className = '';
      switch (type) {
        case 'Create':
          className = 'label-success';
          break;
        case 'Create Duplicate':
          className = 'label-primary';
          break;
        case 'Delete':
          className = 'label-danger';
      }
      return className;
    }

    //@param  string  projectTitle  The string to compare to, 
    //in order to render the new notification.  
    render(projectTitle, type) {
      var ctx, sProj, sTitle;
      ctx = this;
      sProj = '.sidebar-menu .treeview-menu.projects';
      sTitle = `${sProj} li > a > span`;
      return $(`${sTitle}:contains('${projectTitle}')`).filter(function() {
        var li, n, oNotif;
        if ($.trim($(this).text()) === $.trim(projectTitle)) {
          li = $(this).closest('li');
          oNotif = li.find('#notif.project');
          oNotif.addClass(ctx.labelClassName(type));
          n = parseInt(oNotif.html());
          n = isNaN(n) || n < 0 ? 1 : n + 1;
          oNotif.html(n);
          return ctx.renderUi(title, type);
        }
      });
    }

    renderUi(projectTitle, type) {
      var msg, title;
      title = 'PHP Censor - Build Notification';
      if (!Notify.needsPermission) {
        msg = `A new build has been created for project ${projectTitle}.`;
        return new Notify(title, {
          body: msg
        }).show();
      } else if (Notify.isSupported()) {
        return Notify.requestPermission(null, function() {
          return console.warn(`${title}: Permission has been denied by the user.`);
        });
      }
    }

  };

  $(document).ready(function() {
    var b;
    b = $('#build-notif');
    if (b.length > 0) {
      return new WsNotif(b.data('host'), b.data('topic'));
    }
  });

}).call(this);
